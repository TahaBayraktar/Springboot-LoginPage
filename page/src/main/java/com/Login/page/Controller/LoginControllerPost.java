package com.Login.page.Controller;

import java.security.SecureRandom;
import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.Login.page.Entity.User;
import com.Login.page.Repository.UserRepository;
import com.Login.page.Service.EmailService;
import com.Login.page.Service.PasswordService;
@Controller
public class LoginControllerPost {
	
	int dogrulamakod;
	int sifredogrulamakod;
	
	
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private EmailService emailService;
	 @Autowired
	 private PasswordService passwordService;
	 User newUser=new User();
	
	//KullanÄ±cÄ± bilgilerini kontrol edip anasayfaya gÃ¶nderen metod
	@PostMapping("/AnasayfaGiris")
	public String KontrolLogin(Model model,
			@RequestParam("username") String username, @RequestParam("password") String password) {
		User user = userRepository.findByUsername(username.toLowerCase());
		if (user != null && passwordService.verifyPassword(password, user.getPassword())) {
	        // EÄŸer ÅŸifre doÄŸruysa, anasayfaya yÃ¶nlendir
	        return "homepage";
	    } 
		 model.addAttribute("error", "KullanÄ±cÄ± adÄ± veya ÅŸifre hatalÄ±!");
		 model.addAttribute("username", username);
		 
		return "login";
	}
	
	//KayÄ±t oldaki bilgileri gÃ¶ndermek iÃ§in metod 
	@PostMapping("/UyeGiris")
	public String GirisYonlendir(@RequestParam("username") String username, 
								@RequestParam("password") String password,
								@RequestParam("name") String name,
								@RequestParam("surname") String surname,
								@RequestParam("email") String email,
								@RequestParam("number") String number,
								@RequestParam("confirmPassword") String confirmPassword,
								Model model
								) {
		
		model.addAttribute("username", username);
		model.addAttribute("password", password);
		model.addAttribute("name", name);
		model.addAttribute("surname", surname);
		model.addAttribute("email", email);
		model.addAttribute("number", number);
		model.addAttribute("confirmPassword", confirmPassword);
		
		
		int nameUzunluk=50;
		if(nameUzunluk<name.length() || name.length()<=2) {
			model.addAttribute("error", "Ä°sminiz 50 karakterden fazla ve 2 karakterden az olamaz");
			 return "register";
		}
		int surnameUzunluk=30;
		if(surnameUzunluk<surname.length() || surname.length()<=2) {
			model.addAttribute("error", "SoyadÄ±nÄ±z 30 karakterden fazla ve 2 karakterden az olamaz");
			 return "register";
		}
		int usernameUzunluk=30;
		if(usernameUzunluk<username.length() || username.length()<=2) {
			model.addAttribute("error", "KullanÄ±cÄ± adÄ± 30 karakterden fazla ve 2 karakterden az olamaz");
			 return "register";
		}
		int emailUzunluk=50;
		if(emailUzunluk<email.length() || email.length()<=10) {
			model.addAttribute("error", "Email 50 karakterden fazla ve 10 karakterden az olamaz");
			 return "register";
		}
		int numberUzunluk=11;
		if(numberUzunluk!=number.length()) {
			 model.addAttribute("error", "Telefon numarasÄ± 11 haneli olmalÄ±dÄ±r.");
			 return "register";
		}
		int passwordUzunluk=30;
		if(passwordUzunluk<password.length()) {
			 model.addAttribute("error", "Åžifreniz 30 karakterden fazla olamaz.");
			 return "register";
		}
		List<User> us=userRepository.findAll();
		for(User users:us) {
			if(users.getUsername().equals(username)) {
				 model.addAttribute("error", "Bu kullanÄ±cÄ± adÄ± daha Ã¶nceden alÄ±nmÄ±ÅŸ");
				 return "register";
			}
			
			
			if(users.getEmail().equals(email)) {
				 model.addAttribute("error", "Bu email zaten kullanÄ±lÄ±yor.");
				 return "register";
			}
			
			if(users.getNumber().equals(number)) {
				 model.addAttribute("error", "Bu telefon numarasÄ± zaten kullanÄ±lÄ±yor.");
				 return "register";
			}
			
		}
		
		if(!password.equals(confirmPassword)) {
			 model.addAttribute("error", "Åžifreler eÅŸleÅŸmedi.");
			 return "register";
		}
		
		if(!PasswordControl(password)) {
			model.addAttribute("error", "LÃ¼tfen en az 5 haneli bir bÃ¼yÃ¼k harf bir Ã¶zel karakter iÃ§eren ÅŸifre giriniz.");
			return "register";
		}
		if (emailService == null) {
		    System.out.println("emailService null olduÄŸu iÃ§in mail gÃ¶nderilemiyor!");
		}
		
		
		model.addAttribute("email", email);
		surname= surname.substring(0, 1).toUpperCase()+ surname.substring(1).toLowerCase();
		name=formatFullName(name);
		int kod=dogrulamaKodu();
		String body=String.format("""
	            Merhaba,

	            HesabÄ±nÄ±zÄ± doÄŸrulamak iÃ§in aÅŸaÄŸÄ±daki doÄŸrulama kodunu kullanabilirsiniz:

	            ðŸ‘‰ KODUNUZ: %d ðŸ‘ˆ

	            EÄŸer bu iÅŸlemi siz yapmadÄ±ysanÄ±z, lÃ¼tfen bizimle iletiÅŸime geÃ§in.

	            SaygÄ±lar,
	            Thbayraktar Destek Ekibi
	        """, kod);
		
		dogrulamakod=kod;
		emailService.sendVerificationEmail(email, "Hesap GÃ¼venliÄŸi Ä°Ã§in Onay Kodunuz",body);
		
		String hashedPassword = passwordService.hashPassword(password);
		
		
		 
		 
		 newUser.setEmail(email.toLowerCase());
		 newUser.setName(name);
		 newUser.setNumber(number);
		 newUser.setPassword(hashedPassword);
		 newUser.setSurname(surname);
		 newUser.setUsername(username.toLowerCase());
		 
		
		
		
		
		return "verification";
	}
	
	
	//Kod doÄŸrulama iÅŸlemi yapan metod
	@PostMapping("/Dogrulama")
	public String DogrulamaKontrol(Model model,
								   @RequestParam("DogrulamaKodu") int DogrulamaKodu,
								   @RequestParam("email") String email
								   ) {
		if(DogrulamaKodu!=dogrulamakod) {
			model.addAttribute("error", "DoÄŸrulama kodu hatalÄ±.");
			model.addAttribute("DogrulamaKodu",DogrulamaKodu );
			model.addAttribute("email", email);
			
			return "verification";
		}
		userRepository.save(newUser);
		emailService.sendVerificationEmail(email, "Hesap Ä°ÅŸlemi","HesabÄ±nÄ±z baÅŸarÄ±yla oluÅŸturuldu artÄ±k giriÅŸ yapabilirsiniz.");

		return "login";
	}
	//Kodun tekrar gÃ¶nderilmesini saÄŸlayan method
	@PostMapping("/TekrarGonder")
	public String TekrarKodGonder(@RequestParam("email") String email,
								  Model model) {
		String body="DoÄŸrulama kodunuz:";
		int kod=dogrulamaKodu();
		dogrulamakod=kod;
		emailService.sendVerificationEmail(email, "Email doÄŸrulama kodu", body+"\n"+kod);
		model.addAttribute("email", email);
		return "verification";
	}
	String sifreYenilemeMail;
	@PostMapping("/SifreYenilemeKod")
	public String sifreYenileme(@RequestParam("email") String email,
			  Model model) {
		List<User> us=userRepository.findAll();
	
		for(User users:us) {
			if(users.getEmail().equals(email)) {
				String body="Åžifrenizi yenilemek iÃ§in doÄŸrulama kodunuz:";
				int kod=dogrulamaKodu();
				sifredogrulamakod=kod;
				emailService.sendVerificationEmail(email, "Email doÄŸrulama kodu", body+"\n"+kod);
				model.addAttribute("success", "DoÄŸrulama kodu e-posta adresinize baÅŸarÄ±yla gÃ¶nderildi.");
				model.addAttribute("emailGonderildi", true);
		        model.addAttribute("kodDogru", false);
		       
				sifreYenilemeMail=email;
				return "passwordReset";
				
			}
		}
		model.addAttribute("email", email);
		model.addAttribute("emailGonderildi", false);
		model.addAttribute("error", "GirdiÄŸiniz mail adresi bulunamadÄ±.");
		return "passwordReset";
	}
	@PostMapping("/KodDogrulama")
	public String kodDogrulama(@RequestParam("verificationCode") int dogrulamakod,Model model) {
		if(sifredogrulamakod!=dogrulamakod) {
			 model.addAttribute("error", "Girilen kod hatalÄ±.");
			 model.addAttribute("emailGonderildi", true); // E-posta alanÄ± gizli kalacak
			 model.addAttribute("dogrulamakod", dogrulamakod);
		     model.addAttribute("kodDogru", false);
			
			 return "passwordReset";
		}
		 model.addAttribute("kodDogru", true);
		 model.addAttribute("emailGonderildi", true);
		 
		return "passwordReset";
	}
	@PostMapping("/SifreKodYenileme")
	public String sifreTekrarKod(Model model) {
		String body="Åžifrenizi yenilemek iÃ§in doÄŸrulama kodunuz:";
		int kod=dogrulamaKodu();
		sifredogrulamakod=kod;
		emailService.sendVerificationEmail(sifreYenilemeMail, "Email doÄŸrulama kodu", body+"\n"+kod);
		model.addAttribute("emailGonderildi", true);
        model.addAttribute("kodDogru", false);
		return "passwordReset";
		
	}
	@PostMapping("/SifreGuncelle")
	public String sifreGuncelle(@RequestParam("yeniSifre") String yeniSifre, 
								@RequestParam("sifreTekrar") String sifreTekrar,
								Model model) {
		if(!yeniSifre.equals(sifreTekrar)) {
			 model.addAttribute("error", "Åžifreler uyuÅŸmuyor.");
			 model.addAttribute("kodDogru", true);
		      model.addAttribute("emailGonderildi", true);
		      model.addAttribute("yeniSifre", yeniSifre);
		      model.addAttribute("sifreTekrar", sifreTekrar);
			 return "passwordReset";
		}
		if(!PasswordControl(yeniSifre)) {
			 model.addAttribute("kodDogru", true);
		     model.addAttribute("emailGonderildi", true);
		     model.addAttribute("yeniSifre", yeniSifre);
		      model.addAttribute("sifreTekrar", sifreTekrar);
			 model.addAttribute("error", "LÃ¼tfen en az 5 haneli bir bÃ¼yÃ¼k harf bir Ã¶zel karakter iÃ§eren ÅŸifre giriniz.");
			return "passwordReset";
		}
		User us=userRepository.findByEmail(sifreYenilemeMail);
		if(us.getPassword().equals(yeniSifre)) {
			 model.addAttribute("kodDogru", true);
		     model.addAttribute("emailGonderildi", true);
		     model.addAttribute("yeniSifre", yeniSifre);
		      model.addAttribute("sifreTekrar", sifreTekrar);
		     model.addAttribute("error", "Yeni ÅŸifreniz eski ÅŸifrenizle aynÄ± olamaz.");
		     return "passwordReset";
		}
		String hashedPassword = passwordService.hashPassword(yeniSifre);
		us.setPassword(hashedPassword);
		userRepository.save(us);
		emailService.sendVerificationEmail(sifreYenilemeMail, "Åžifreniz baÅŸarÄ±lÄ± bir ÅŸekilde deÄŸiÅŸtirilmiÅŸtir.","\n Ä°yi GÃ¼nler Dileriz");
		
		return "login";
	}
	
	
	
	//DoÄŸrulama Kodu gÃ¶ndermek iÃ§in metod
	private int dogrulamaKodu() {
		 SecureRandom random = new SecureRandom();
	        int code = 100000 + random.nextInt(900000); // 100000 ile 999999 arasÄ±nda sayÄ± Ã¼retir
	        return code;
		
	}
	//Åžifre KontrolÃ¼ yapmak iÃ§in metod
	private boolean PasswordControl(String password) {
		  if (password.length() < 5) {
	            return false;
	        }
		  // En az bir bÃ¼yÃ¼k harf iÃ§ermeli
	        Pattern upperCasePattern = Pattern.compile("[A-Z]");
	        Matcher upperCaseMatcher = upperCasePattern.matcher(password);
	        if (!upperCaseMatcher.find()) {
	            return false;
	        }
	        // En az bir Ã¶zel karakter iÃ§ermeli
	        Pattern specialCharPattern = Pattern.compile("[!@#$%^&*()_+=\\-\\[\\]{};':\"\\\\|,.<>/?]");
	        Matcher specialCharMatcher = specialCharPattern.matcher(password);
	        if (!specialCharMatcher.find()) {
	            return false;
	        }
	        return true;
	}
	private String formatFullName(String name) {
	    if (name == null || name.isEmpty()) {
	        return name; // EÄŸer boÅŸsa veya null ise direkt dÃ¶ndÃ¼r
	    }

	    String[] words = name.trim().split("\\s+"); // Birden fazla boÅŸluÄŸu tek boÅŸluÄŸa indir
	    StringBuilder formattedName = new StringBuilder();

	    for (String word : words) {
	        if (!word.isEmpty()) {
	            formattedName.append(Character.toUpperCase(word.charAt(0))) // Ä°lk harfi bÃ¼yÃ¼k yap
	                          .append(word.substring(1).toLowerCase()) // Geri kalanÄ±nÄ± kÃ¼Ã§Ã¼k yap
	                          .append(" "); // Kelimeleri ayÄ±rmak iÃ§in boÅŸluk ekle
	        }
	    }

	    return formattedName.toString().trim(); // Sonundaki boÅŸluÄŸu kaldÄ±r ve dÃ¶ndÃ¼r
	}
}
